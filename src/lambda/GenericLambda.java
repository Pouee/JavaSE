package lambda;
/**
 * 支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++
 * 支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++
 * 支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++
 * 支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++
 * 支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++
 * 支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++
 * 支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++
 * 支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++
 * 支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++
 * 支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++
 * 支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++
 * 支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++
 * 支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++
 * 支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++
 * 支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++
 * 支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++
 * 支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++
 * 支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++	支持C++
 * @author Pouee
 */
public class GenericLambda {
	/**
	 * 	怎么这么low！！！！！
	 *	怎么这么low！！！！！
	 *	怎么这么low！！！！！
	 *	怎么这么low！！！！！
	 *	怎么这么low！！！！！
	 * @author Pouee
	 * C++:
	 * auto fp = [](auto& k)-> void {cout << k << endl; };
	 */
	@FunctionalInterface
	static interface TT<T>{
		void f(T t);
	}
	
	static <T> void every(T[] objs,TT<T> t){
		for (int i = 0; i < objs.length; i++) {
			t.f(objs[i]);
		}
	}
	//@SuppressWarnings("unchecked")
	public static void main(String[] args) {
		//@SuppressWarnings("rawtypes")
		TT baseOutput = a->{System.out.println(a);};
		Integer []arr = {1,2,3,4,5,6,2,3,5};
		Double[] darr = {1.0,2.0,34.2,5.23,6.23,7.213,1.23};
		every(arr, baseOutput);
		every(darr, baseOutput);
	}
}
